// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: protoc/k8sbridge.proto

package k8sbridge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// K8SHelperClient is the client API for K8SHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type K8SHelperClient interface {
	CreateKeypair(ctx context.Context, in *K8SHelperRequest, opts ...grpc.CallOption) (*KeyPair, error)
	GetKey(ctx context.Context, in *K8SHelperRequest, opts ...grpc.CallOption) (*KeyPair, error)
	CreatePod(ctx context.Context, in *FeederConfig, opts ...grpc.CallOption) (*CreatePodResult, error)
	RestartPod(ctx context.Context, in *FeederConfig, opts ...grpc.CallOption) (*RestartPodResult, error)
	DeletePod(ctx context.Context, in *FeederConfig, opts ...grpc.CallOption) (*DeletePodResult, error)
}

type k8SHelperClient struct {
	cc grpc.ClientConnInterface
}

func NewK8SHelperClient(cc grpc.ClientConnInterface) K8SHelperClient {
	return &k8SHelperClient{cc}
}

func (c *k8SHelperClient) CreateKeypair(ctx context.Context, in *K8SHelperRequest, opts ...grpc.CallOption) (*KeyPair, error) {
	out := new(KeyPair)
	err := c.cc.Invoke(ctx, "/rpc.K8SHelper/CreateKeypair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SHelperClient) GetKey(ctx context.Context, in *K8SHelperRequest, opts ...grpc.CallOption) (*KeyPair, error) {
	out := new(KeyPair)
	err := c.cc.Invoke(ctx, "/rpc.K8SHelper/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SHelperClient) CreatePod(ctx context.Context, in *FeederConfig, opts ...grpc.CallOption) (*CreatePodResult, error) {
	out := new(CreatePodResult)
	err := c.cc.Invoke(ctx, "/rpc.K8SHelper/CreatePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SHelperClient) RestartPod(ctx context.Context, in *FeederConfig, opts ...grpc.CallOption) (*RestartPodResult, error) {
	out := new(RestartPodResult)
	err := c.cc.Invoke(ctx, "/rpc.K8SHelper/RestartPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SHelperClient) DeletePod(ctx context.Context, in *FeederConfig, opts ...grpc.CallOption) (*DeletePodResult, error) {
	out := new(DeletePodResult)
	err := c.cc.Invoke(ctx, "/rpc.K8SHelper/DeletePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SHelperServer is the server API for K8SHelper service.
// All implementations must embed UnimplementedK8SHelperServer
// for forward compatibility
type K8SHelperServer interface {
	CreateKeypair(context.Context, *K8SHelperRequest) (*KeyPair, error)
	GetKey(context.Context, *K8SHelperRequest) (*KeyPair, error)
	CreatePod(context.Context, *FeederConfig) (*CreatePodResult, error)
	RestartPod(context.Context, *FeederConfig) (*RestartPodResult, error)
	DeletePod(context.Context, *FeederConfig) (*DeletePodResult, error)
	mustEmbedUnimplementedK8SHelperServer()
}

// UnimplementedK8SHelperServer must be embedded to have forward compatible implementations.
type UnimplementedK8SHelperServer struct {
}

func (UnimplementedK8SHelperServer) CreateKeypair(context.Context, *K8SHelperRequest) (*KeyPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeypair not implemented")
}
func (UnimplementedK8SHelperServer) GetKey(context.Context, *K8SHelperRequest) (*KeyPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedK8SHelperServer) CreatePod(context.Context, *FeederConfig) (*CreatePodResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePod not implemented")
}
func (UnimplementedK8SHelperServer) RestartPod(context.Context, *FeederConfig) (*RestartPodResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartPod not implemented")
}
func (UnimplementedK8SHelperServer) DeletePod(context.Context, *FeederConfig) (*DeletePodResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePod not implemented")
}
func (UnimplementedK8SHelperServer) mustEmbedUnimplementedK8SHelperServer() {}

// UnsafeK8SHelperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to K8SHelperServer will
// result in compilation errors.
type UnsafeK8SHelperServer interface {
	mustEmbedUnimplementedK8SHelperServer()
}

func RegisterK8SHelperServer(s grpc.ServiceRegistrar, srv K8SHelperServer) {
	s.RegisterService(&K8SHelper_ServiceDesc, srv)
}

func _K8SHelper_CreateKeypair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SHelperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SHelperServer).CreateKeypair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.K8SHelper/CreateKeypair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SHelperServer).CreateKeypair(ctx, req.(*K8SHelperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SHelper_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SHelperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SHelperServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.K8SHelper/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SHelperServer).GetKey(ctx, req.(*K8SHelperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SHelper_CreatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeederConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SHelperServer).CreatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.K8SHelper/CreatePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SHelperServer).CreatePod(ctx, req.(*FeederConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SHelper_RestartPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeederConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SHelperServer).RestartPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.K8SHelper/RestartPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SHelperServer).RestartPod(ctx, req.(*FeederConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SHelper_DeletePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeederConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SHelperServer).DeletePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.K8SHelper/DeletePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SHelperServer).DeletePod(ctx, req.(*FeederConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// K8SHelper_ServiceDesc is the grpc.ServiceDesc for K8SHelper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var K8SHelper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.K8SHelper",
	HandlerType: (*K8SHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKeypair",
			Handler:    _K8SHelper_CreateKeypair_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _K8SHelper_GetKey_Handler,
		},
		{
			MethodName: "CreatePod",
			Handler:    _K8SHelper_CreatePod_Handler,
		},
		{
			MethodName: "RestartPod",
			Handler:    _K8SHelper_RestartPod_Handler,
		},
		{
			MethodName: "DeletePod",
			Handler:    _K8SHelper_DeletePod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoc/k8sbridge.proto",
}
